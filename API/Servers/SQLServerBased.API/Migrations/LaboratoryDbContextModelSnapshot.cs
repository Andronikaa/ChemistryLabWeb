// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SQLServerBased.API.Data;

namespace SQLServerBased.API.Migrations
{
    [DbContext(typeof(LaboratoryDbContext))]
    partial class LaboratoryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ChemicalElementCompound", b =>
                {
                    b.Property<int>("ChemicalElementsId")
                        .HasColumnType("int");

                    b.Property<int>("CompoundsId")
                        .HasColumnType("int");

                    b.HasKey("ChemicalElementsId", "CompoundsId");

                    b.HasIndex("CompoundsId");

                    b.ToTable("ChemicalElementCompound");
                });

            modelBuilder.Entity("SQLServerBased.API.Models.ChemicalElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AtomicMass")
                        .HasColumnType("float");

                    b.Property<int>("AtomicNumber")
                        .HasColumnType("int");

                    b.Property<string>("ChemicalSymbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Group")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ChemicalElements");
                });

            modelBuilder.Entity("SQLServerBased.API.Models.Compound", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompoundCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("MolecularFormula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompoundCategoryId");

                    b.ToTable("Compounds");
                });

            modelBuilder.Entity("SQLServerBased.API.Models.CompoundCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CompoundCategories");
                });

            modelBuilder.Entity("ChemicalElementCompound", b =>
                {
                    b.HasOne("SQLServerBased.API.Models.ChemicalElement", null)
                        .WithMany()
                        .HasForeignKey("ChemicalElementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SQLServerBased.API.Models.Compound", null)
                        .WithMany()
                        .HasForeignKey("CompoundsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SQLServerBased.API.Models.Compound", b =>
                {
                    b.HasOne("SQLServerBased.API.Models.CompoundCategory", "CompoundCategory")
                        .WithMany("Compounds")
                        .HasForeignKey("CompoundCategoryId");

                    b.Navigation("CompoundCategory");
                });

            modelBuilder.Entity("SQLServerBased.API.Models.CompoundCategory", b =>
                {
                    b.Navigation("Compounds");
                });
#pragma warning restore 612, 618
        }
    }
}
